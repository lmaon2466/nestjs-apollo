import { v4 } from "uuid";
import { faker } from "@faker-js/faker";
import { Injectable } from "@nestjs/common";
import { generateRecordsPayload } from "../../data/testData/test-types";
import { User } from "../../graph/entity/user.entity";

// The following types would normally be generated by an ORM like Prisma
type Author = { id: string; user: User; genre: string[] };

// This class is just mocking a database
@Injectable()
export class AuthorDataRecords {
  public authorRecords: { [key: string]: Author } = {};

  createAuthor(input) {
    let id = v4();
    this.authorRecords[id] = {
      id,
      genre: input.genre,
      user: { id: input.userId, ...input },
    };
    return this.authorRecords[id];
  }

  getAuthorById(authorId: string) {
    return this.authorRecords[authorId];
  }

  getAllAuthors() {
    return Object.values(this.authorRecords);
  }

  generateAuthorData(): generateRecordsPayload {
    for (let i = 0; i < 50; i++) {
      let id = v4();
      this.authorRecords[id] = {
        id,
        user: {
          __typename: "User",
          id: v4(),
          username: faker.internet.userName(),
          firstname: faker.person.firstName(),
          lastname: faker.person.lastName(),
        },
        genre: [faker.music.genre(), faker.music.genre()],
      };
    }

    return { ok: true };
  }
  catch(err: unknown) {
    console.error(err);
    return { ok: false };
  }
}
