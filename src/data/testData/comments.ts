import { v4 } from "uuid";
import { faker } from "@faker-js/faker";
import { User } from "../../graph/entity/user.entity";

// The following types would normally be generated by an ORM like Prisma
type Comment = { id: string; content: string; author: User };
export type generateRecordsPayload = { ok: boolean };

export class generateRecordsPayloadType implements generateRecordsPayload {
  ok: boolean = false;
}

export class CommentDataRecords {
  public commentRecords: { [key: string]: Comment } = {};

  getComment(id: string) {
    return this.commentRecords[id];
  }

  getAllComments(userId: string) {
    return Object.values(this.commentRecords).filter(
      (comment) => comment.author.id === userId
    );
  }

  generateCommentData(): generateRecordsPayload {
    try {
      for (let i = 0; i < 50; i++) {
        let id = v4();
        this.commentRecords[id] = {
          id,
          content: faker.word.words({ count: { min: 20, max: 100 } }),
          author: {
            __typename: "User",
            id: v4(),
            username: faker.internet.userName(),
            firstname: faker.name.firstName(),
            lastname: faker.name.lastName(),
          },
        };
      }

      return { ok: true };
    } catch (err: unknown) {
      console.error(err);
      return { ok: false };
    }
  }
}
