import { v4 } from "uuid";
import { faker } from "@faker-js/faker";
import { User } from "../../graph/entity/user.entity";
import { Injectable } from "@nestjs/common";
import { generateRecordsPayload } from "../../data/testData/test-types";

// The following types would normally be generated by an ORM like Prisma
type Comment = { id: string; content: string; author?: User; userId: string };

// This class is just mocking a database
@Injectable()
export class CommentDataRecords {
  public commentRecords: { [key: string]: Comment } = {};

  createComment(input) {
    let id = v4();
    this.commentRecords[id] = {
      id,
      content: input.content,
      userId: input.userId,
    };
    return this.commentRecords[id];
  }

  getCommentById(id: string) {
    return this.commentRecords[id];
  }

  getCommentsByAuthor(userId: string) {
    return Object.values(this.commentRecords).filter(
      (comment) => comment.author.id === userId
    );
  }

  getAllComments() {
    return Object.values(this.commentRecords);
  }

  generateCommentData() {
    try {
      for (let i = 0; i < 50; i++) {
        let id = v4();
        this.commentRecords[id] = {
          id,
          content: faker.word.words({ count: { min: 20, max: 100 } }),
          userId: v4(),
          author: {
            __typename: "User",
            id: v4(),
            username: faker.internet.userName(),
            firstname: faker.person.firstName(),
            lastname: faker.person.lastName(),
          },
        };
      }

      return Object.values(this.commentRecords).map((record) => ({
        typename: "Comment",
        ...record,
      }));
    } catch (err: unknown) {
      console.error(err);
      throw new Error("Failed to generate comment records.");
    }
  }
}
